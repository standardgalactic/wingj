% Copyright (c) 2010-2013 Thomas Schaffter, Ricard Delgado-Gonzalo
%
% We release this software open source under a Creative Commons Attribution
% -NonCommercial 3.0 Unported License. Please cite the papers listed on 
% http://lis.epfl.ch/wingj when using WingJ in your publication.
%
% For commercial use, please contact Thomas Schaffter 
% (thomas.schaff...@gmail.com).
%
% A brief description of the license is available at 
% http://creativecommons.org/licenses/by-nc/3.0/ and the full license at 
% http://creativecommons.org/licenses/by-nc/3.0/legalcode.
%
% The above copyright notice and this permission notice shall be included 
% in all copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
% OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
% IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
% CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
% OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
% THE USE OR OTHER DEALINGS IN THE SOFTWARE.
%
% This class represents a 1D expression dataset generated by WingJ.
%
% A 1D expression profile has a x-axis which is the trajectory along which
% the expression has been measured (e.g. in um). For wing pouch structure,
% the origin correspond to the intersection of the D/V and A/P boundary. If
% the reference boundary is A/P, negative values are in the anterior
% direction. If the reference boundary is D/V, the negative values are in
% the ventral side.
%
% The y-axis correspond to the level of expression measured for each point
% on the trajectory. Depending on the WJSettings in WingJ, expression can be
% in [0,255] or normalized between [0,1]. It is recommended to export using
% [0,255] to enable comparison with expression profiles of other genes and
% protein.
%
% See the Supplementary Material for more information about how expression
% profiles are generated in WingJ.
%
% Author: Thomas Schaffter (thomas.schaff...@gmail.com)
% Version: September 10, 2012
classdef ExpressionProfile < handle
    
    properties(GetAccess = 'private', SetAccess = 'private')
        
        % Extension of the profile (.txt)
        profileExt = '.txt';
        % Extension of the preview (.tif)
        previewExt = '.tif';
    end
    
    properties(GetAccess = 'public', SetAccess = 'private')
        
        % Root name, e.g.:
        % /mnt/extra/wingj_benchmarks/.../WingJ/ombLACZ_expression_profile_DV0.0
        % One use if for loading the preview image only when required.
        rootFilename = '';
        
        % Name of the experiment.
        name = '';
        % Gene name.
        geneName = '';
        
        % Expression profile (x: spatial, y: expression).
        profile = [];
        
        % Reference axis (D/V or A/P boundary).
        referenceBoundary = '';
        % Offset in percent.
        % If referenceBoundary == 'D/V', negative: D, positive: V
        % If referenceBoundary == 'A/P', negative: A, positive: P
        offset = 0;
        
        % Preview image where the domain where expression was measured is
        % displayed.
        preview = [];
    end
    
    % =====================================================================
	% PRIVATE METHODS
    
    methods (Access = private)
        
        % Initialize
        function initialize(obj, rootFilename, experimentName)
            
            obj.rootFilename = rootFilename;
            
            % open expression profile
            obj.openExpressionProfile([rootFilename obj.profileExt]);
%             % open preview image
%             obj.openPreviewImage([rootFilename obj.previewExt]);
            % set the dataset name
            tokens = regexp(rootFilename,filesep,'split');
            tokens = regexp(tokens{end},'_','split');
            obj.setGeneName(tokens{1});
            % set the reference boundary and offset variables
            obj.setReferenceBoundaryAndOffset(rootFilename);
            % set a string characterizing the dataset
            obj.setName([experimentName ' ' obj.geneName ' ' obj.referenceBoundary ' ' num2str(obj.offset)]);
        end 
            
        % -----------------------------------------------------------------
        
        % Set the reference boundary and offset variables
        function setReferenceBoundaryAndOffset(obj, rootFilename)
           
            % looking for the token after the last delimiter '_'
            tokens = regexp(rootFilename,'_','split');
            token = tokens{end};
            % the two forst letters determine the reference boundary
            if strcmp(token(1:2), 'DV')
                obj.referenceBoundary = 'D/V';
            elseif strcmp(token(1:2), 'AP')
                obj.referenceBoundary = 'A/P';
            else
                error('ERROR: Invalid reference boundary.');
            end
            % what is left of the string is the offset
            obj.offset = str2double(token(3:end));
        end
    end
    
    % =====================================================================
	% PUBLIC METHODS
    
    methods
        
        % Constructor
        function obj = ExpressionProfile(rootFilename, experimentName)
            if nargin > 0
                obj.initialize(rootFilename,experimentName);
            end
        end
        
        % -----------------------------------------------------------------
        
        % Opens the expression profile.
        function openExpressionProfile(obj, filename)
            
            obj.profile = dlmread(filename);
            if WJSettings.getInstance.expressionProfileNormalize
                obj.profile(:,2) = obj.profile(:,2) ./ 255;
            end
        end
        
        % -----------------------------------------------------------------
        
        % Opens the preview image to show where the expression profile has
        % been measured.
        function openExpressionPreview(obj)
            
            for i=1:length(obj)
                p = obj(i);
                if isempty(p.preview)
                    filename = [p.rootFilename p.previewExt];
                    try
                        p.preview = imread(filename);
                    catch err %#ok<NASGU>
                        disp(['WARNING: Unable to load expression preview ' filename '.']);
                        p.preview = [];
                    end
                end
            end
        end
        
        % -----------------------------------------------------------------
        
        % Shows preview images on which it is indicated where expression
        % profiles have been measured.
        function showExpressionPreview(obj, galery)
            if nargin < 2
                galery = true;
            end
            % Loads the expression preview if required.
            obj.openExpressionPreview();
            % Get all the images and place them in a cell array. Idem for
            % the image title. First load the images if required and count
            % the number of effective images.
            Neff = 0;
            for i=1:length(obj)
                e = obj(i);
                if ~isempty(e.preview)
                    Neff = Neff+1;
                end
            end
            % Build the list of images
            I = cell(Neff,1);
            titles = cell(Neff,1);
            for i=1:length(obj)
                e = obj(i);
                if ~isempty(e.preview)
                    I{i} = e.preview;
                    titles{i} = regexprep(e.name, '_', '\_');
                end
            end            
            if ~isempty(I)
                show_image_galery(I,titles,galery);
            end
        end
        
        % -----------------------------------------------------------------
        
        % Plots expression profile.
        function plotExpressionProfiles(obj)

            N = length(obj);
            disp(['Plotting ' num2str(N) ' expression profile(s):']);
            
            for i=1:N
                p=obj(i);
                disp(p.name);
                plot(p.profile(:,1),p.profile(:,2));
                hold on;
            end
            
            xlabel('X');
            ylabel('Expression');
        end
        
        % -----------------------------------------------------------------
        
        % Combines the given expression profiles and returns the averaged
        % 1D expression profile.
        function [X Ymean Yse] = computeMeanExpressionProfile(obj, numInterpSamples)
            
%             WJSettings = WJSettings.getInstance;
%             if nargin < 2 || isempty(numInterpSamples) || numInterpSamples < 1
%                 numInterpSamples = WJSettings.expressionProfileNumInterpSamples;
%             end

            if nargin < 2 || isempty(numInterpSamples) || numInterpSamples < 1
                error(['ERROR: Experiment ' obj.name ': The number of interpolation samples is required.']);
            end
            
            % Computes the xmin and xmax as the means of the xmin,i and
            % xmax,i.
            [Xmin,Xmax] = obj.getXminXmax();
            xmin = mean(Xmin);
            xmax = mean(Xmax);
            % All profiles may not have the same X. Resample each of them
            % the same way.
            X = linspace(xmin,xmax,numInterpSamples);
            Y = zeros(length(X),length(obj)); % 1 profile per column
            for i=1:length(obj)
                x = obj(i).profile(:,1);
                y = obj(i).profile(:,2);
                Y(:,i) = interp1(x,y,X);
            end
            
            % Note that the profiles "shorter" than xmin and xmax have nan
            % elements in Y.
            Ymean = nanmean(Y,2)'; % mean ignoring NaN
            %Ystd = nanstd(Y,[],2)'; % std ignoring NaN
            Yse = nansem(Y,2)'; % se ignoring NaN
        end
        
        % -----------------------------------------------------------------
        
        % Returns the computed mean expression profile as an
        % ExpressionProfile object.
        function profile = getMeanExpressionProfile(obj)
             
            [X,Ymean,~] = obj.computeMeanExpressionProfile();
            
            if ~isempty(X) && ~isempty(Ymean)
                profile = ExpressionProfile();
                profile.setXY([X' Ymean']);
            else
                profile = [];
            end
        end
        
        % -----------------------------------------------------------------
        
        % Combines the given expression profiles and plot the mean and
        % standard error.
        function [X Ymean Ystd] = plotMeanExpressionProfile(obj, numPlotSamples, numInterpSamples, plotOptions)
            
%             WJSettings = WJSettings.getInstance;
%             if nargin < 2 || isempty(numPlotSamples) || numPlotSamples < 1
%                 numPlotSamples = WJSettings.expressionProfileNumInterpSamples;
%             end
            if nargin < 2 || isempty(numPlotSamples) || numPlotSamples < 1
                error(['ERROR: Experiment ' obj.name ': The number of plot sample is required.']);
            end

            if nargin < 4
                plotOptions = [];
            end
            
            % Compute mean expression profile
            [X,Ymean,Ystd] = obj.computeMeanExpressionProfile(numInterpSamples);
            
            % Plot resample (if required)
            if ~isempty(numPlotSamples)
                step = max([1 round(length(X)/numPlotSamples)]);
                X = X(1:step:end);
                Ymean = Ymean(1:step:end);
                Ystd = Ystd(1:step:end);
            end
            
            if isempty(plotOptions)
                errorbar(X,Ymean,Ystd); % The length of the bars is 2*Ystd,i
            else
                evalStr = ['errorbar(X,Ymean,Ystd,' plotOptions ');'];
                eval(evalStr);
            end

            xlabel('X');
            ylabel('Expression');
        end
        
        % -----------------------------------------------------------------
        
        % Returns the xmin and xmax of the given ExpressionProfile objects.
        function [Xmin Xmax] = getXminXmax(obj)
            Xmin = zeros(length(obj),1);
            Xmax = zeros(length(obj),1);
            for i=1:length(obj)
                p = obj(i);
                Xmin(i) = p.profile(1,1); % first column, first line
                Xmax(i) = p.profile(end,1); % first column, last line
            end
        end
        
        % -----------------------------------------------------------------
        
        % Computes correlation between every pair of profiles.
        function [R,P] = computeExpressionProfileCorrelations(obj)
            
            N = length(obj);
            R = eye(N);
            P = eye(N);
            for i=1:N
                for j=i+1:N
                    if isempty(obj(i).profile) || isempty(obj(j).profile)
                        r = NaN;
                        p = NaN;
                    else
                        y1 = obj(i).profile(:,2);
                        y2 = obj(j).profile(:,2);
                        [r,p] = corrcoef(y1,y2);
                        r = r(1,2); % keep only this element
                        p = p(1,2); % keep only this element
                    end
                    R(i,j) = r; R(j,i) = r;
                    P(i,j) = p; P(j,i) = p;
                end
            end
        end
        
        % =================================================================
        % SETTERS AND GETTERS
                
        % Sets the name of the experiment.
        function setName(obj, name)
            obj.name = name;
        end
        
        % -----------------------------------------------------------------
        
        % Sets the name of the gene expressed.
        function setGeneName(obj, name)
            obj.geneName = name;
        end
        
        % ----------------------------------------------------------------
        
        % Sets X and Y data.
        function setXY(obj, XY)
            obj.profile = XY;
        end
    end
end